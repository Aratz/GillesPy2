#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include "shmem_lib.h"
#include "semaphore_lib.h"

int main (int argc, char** argv){

	int processes, i;
	int filedes[2];
	pid_t pid;

	if (argc < 3){
		printf("Insufficient arguments\n");
		exit(1);
	}
	
	processes = atoi(argv[2]);
	if(pipe(filedes) == -1){
		perror("pipe");
		exit(1);
	}

	//shmem_init(results);

	for(i = 0; i < processes; i++){

		
		if ((pid = fork()) == 0){
			//child process
			//attach_to_shmem();
			printf("I'm a child! my pid is %i\n", getpid());
			while ((dup2(filedes[1], STDOUT_FILENO) == -1) && (errno == EINTR)){}
			close(filedes[1]);
			close(filedes[0]);
			execv(argv[1], argv);
			perror("execv");
			
			_exit(1);
		}
	}
		close(filedes[1]);

		char buffer[512];
		int results[1000][20];
		int current_array = 0;
		int current_value = 0;
		int current_index = 0;
		char *reader;
		char builder[8];

		while (1){
			//printf(" Begin Buffer ");
			ssize_t count = read(filedes[0], buffer, sizeof(buffer));
			if (count == -1){
				if (errno == EINTR){
					continue;
				} else {
					perror("read");
					exit(1);
				}
			} else if (count == 0){
				break;
			} else {
				reader = &buffer[0];
				while(reader <= &buffer[512]){
					//printf("Pointer is at %p\n", reader);
					if (*reader == '\n'){
						printf("\n");
						current_array++;
						current_value = 0;
						memset(builder, 0, 8*sizeof(char));
					}else if(*reader == ' ') {
						results[current_array][current_value] = atoi(builder);
						printf("%i ", results[current_array][current_value]);
						current_index = 0;
					}else if (*reader > 0){
						builder[current_index] = *reader;
						//printf("value being built: %c\n", *reader);
						current_index++;
					}
					reader++;
					
					
				}


			}
		}

		close(filedes[0]);
		wait(0);

		return 0;
}
